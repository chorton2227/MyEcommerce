/* tslint:disable */
/* eslint-disable */
/**
 * MyEcommerce.Services.OrderService.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AddressDto
 */
export interface AddressDto {
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    firstName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    lastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    street1?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    street2?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    city?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    state?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    country?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    zipCode?: string | null;
}
/**
 * 
 * @export
 * @interface OrderCreateDto
 */
export interface OrderCreateDto {
    /**
     * 
     * @type {string}
     * @memberof OrderCreateDto
     */
    chargeId: string;
    /**
     * 
     * @type {string}
     * @memberof OrderCreateDto
     */
    email: string;
    /**
     * 
     * @type {AddressDto}
     * @memberof OrderCreateDto
     */
    deliveryAddress: AddressDto;
    /**
     * 
     * @type {Array<OrderItemDto>}
     * @memberof OrderCreateDto
     */
    orderItems: Array<OrderItemDto>;
}
/**
 * 
 * @export
 * @interface OrderDto
 */
export interface OrderDto {
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    userId?: string | null;
    /**
     * 
     * @type {OrderStatusDto}
     * @memberof OrderDto
     */
    status?: OrderStatusDto;
    /**
     * 
     * @type {AddressDto}
     * @memberof OrderDto
     */
    deliveryAddress?: AddressDto;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    orderDate?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    chargeId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    email?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderDto
     */
    total?: number;
    /**
     * 
     * @type {Array<OrderItemDto>}
     * @memberof OrderDto
     */
    orderItems?: Array<OrderItemDto> | null;
}
/**
 * 
 * @export
 * @interface OrderItemDto
 */
export interface OrderItemDto {
    /**
     * 
     * @type {string}
     * @memberof OrderItemDto
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemDto
     */
    productId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemDto
     */
    name?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderItemDto
     */
    price?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemDto
     */
    quantity?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderItemDto
     */
    imageUrl?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderItemDto
     */
    total?: number;
}
/**
 * 
 * @export
 * @interface OrderStatusDto
 */
export interface OrderStatusDto {
    /**
     * 
     * @type {number}
     * @memberof OrderStatusDto
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderStatusDto
     */
    name?: string | null;
}
/**
 * 
 * @export
 * @interface PaginatedOrdersDto
 */
export interface PaginatedOrdersDto {
    /**
     * 
     * @type {number}
     * @memberof PaginatedOrdersDto
     */
    pageIndex?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedOrdersDto
     */
    pageLimit?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedOrdersDto
     */
    totalOrders?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PaginatedOrdersDto
     */
    hasMore?: boolean;
    /**
     * 
     * @type {Array<OrderDto>}
     * @memberof PaginatedOrdersDto
     */
    orders?: Array<OrderDto> | null;
}
/**
 * 
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    [key: string]: any | any;

    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    type?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    title?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetails
     */
    status?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    detail?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    instance?: string | null;
}

/**
 * OrdersApi - axios parameter creator
 * @export
 */
export const OrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {OrderCreateDto} [orderCreateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAsync: async (orderCreateDto?: OrderCreateDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageIndex] 
         * @param {number} [pageLimit] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (pageIndex?: number, pageLimit?: number, userId?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageIndex !== undefined) {
                localVarQueryParameter['PageIndex'] = pageIndex;
            }

            if (pageLimit !== undefined) {
                localVarQueryParameter['PageLimit'] = pageLimit;
            }

            if (userId !== undefined) {
                localVarQueryParameter['UserId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/api/Orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {OrderCreateDto} [orderCreateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAsync(orderCreateDto?: OrderCreateDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAsync(orderCreateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [pageIndex] 
         * @param {number} [pageLimit] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(pageIndex?: number, pageLimit?: number, userId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedOrdersDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(pageIndex, pageLimit, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersApiFp(configuration)
    return {
        /**
         * 
         * @param {OrderCreateDto} [orderCreateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAsync(orderCreateDto?: OrderCreateDto, options?: any): AxiosPromise<OrderDto> {
            return localVarFp.createAsync(orderCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [pageIndex] 
         * @param {number} [pageLimit] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(pageIndex?: number, pageLimit?: number, userId?: string, options?: any): AxiosPromise<PaginatedOrdersDto> {
            return localVarFp.getAll(pageIndex, pageLimit, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(id: string, options?: any): AxiosPromise<OrderDto> {
            return localVarFp.getById(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export class OrdersApi extends BaseAPI {
    /**
     * 
     * @param {OrderCreateDto} [orderCreateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public createAsync(orderCreateDto?: OrderCreateDto, options?: any) {
        return OrdersApiFp(this.configuration).createAsync(orderCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [pageIndex] 
     * @param {number} [pageLimit] 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public getAll(pageIndex?: number, pageLimit?: number, userId?: string, options?: any) {
        return OrdersApiFp(this.configuration).getAll(pageIndex, pageLimit, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public getById(id: string, options?: any) {
        return OrdersApiFp(this.configuration).getById(id, options).then((request) => request(this.axios, this.basePath));
    }
}


